// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: internal/proto/service.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashApiClient is the client API for HashApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashApiClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Hash, error)
}

type hashApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHashApiClient(cc grpc.ClientConnInterface) HashApiClient {
	return &hashApiClient{cc}
}

func (c *hashApiClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/HashApi/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashApiServer is the server API for HashApi service.
// All implementations should embed UnimplementedHashApiServer
// for forward compatibility
type HashApiServer interface {
	Get(context.Context, *emptypb.Empty) (*Hash, error)
}

// UnimplementedHashApiServer should be embedded to have forward compatible implementations.
type UnimplementedHashApiServer struct {
}

func (UnimplementedHashApiServer) Get(context.Context, *emptypb.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeHashApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashApiServer will
// result in compilation errors.
type UnsafeHashApiServer interface {
	mustEmbedUnimplementedHashApiServer()
}

func RegisterHashApiServer(s grpc.ServiceRegistrar, srv HashApiServer) {
	s.RegisterService(&HashApi_ServiceDesc, srv)
}

func _HashApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HashApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashApiServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HashApi_ServiceDesc is the grpc.ServiceDesc for HashApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HashApi",
	HandlerType: (*HashApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _HashApi_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/service.proto",
}
