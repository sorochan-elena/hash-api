// Code generated by MockGen. DO NOT EDIT.
// Source: hash_api_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	"hash-api/proto/gen/hash/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockapiClient is a mock of apiClient interface.
type MockapiClient struct {
	ctrl     *gomock.Controller
	recorder *MockapiClientMockRecorder
}

// MockapiClientMockRecorder is the mock recorder for MockapiClient.
type MockapiClientMockRecorder struct {
	mock *MockapiClient
}

// NewMockapiClient creates a new mock instance.
func NewMockapiClient(ctrl *gomock.Controller) *MockapiClient {
	mock := &MockapiClient{ctrl: ctrl}
	mock.recorder = &MockapiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapiClient) EXPECT() *MockapiClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockapiClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*schema.Hash, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*schema.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockapiClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockapiClient)(nil).Get), varargs...)
}
